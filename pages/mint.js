import { useEffect, useState } from "react";
import Head from "next/head";
import { Navigation } from "../components/Navigation";
import styles from "../styles/Home.module.css";
import {
  Button,
  Image,
  Grid,
  Text,
  Container,
  Row,
  Col,
  Input,
  Spacer,
} from "@nextui-org/react";
import { useAccount } from "wagmi";
import { contractABI, contractAddress, tokenURI } from "../utils/constants";
import { ethers } from "ethers";
import Swal from "sweetalert2";

export default function Mint() {
  const { address, isConnected } = useAccount();
  const [isLoading, setIsLoading] = useState(false);
  const [isAlreadyOwner, setAlreadyOwner] = useState(false);

  const mint = async () => {
    if (!isConnected) {
      Swal.fire({
        icon: "error",
        title: "Something went wrong",
        html: `Please Connect Wallet First`,
      });
      return;
    }
    setIsLoading(true);
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    const signer = provider.getSigner();
    const contract = new ethers.Contract(contractAddress, contractABI, signer);
    console.log(contract);
    try {
      const tx = await contract.mintDarkNFT(address, tokenURI);
      await tx.wait();
      Swal.fire({
        icon: "success",
        title: "Minted successfully",
        html: `<a href="https://mumbai.polygonscan.com//tx/${tx.hash}">View on explorer</a>`,
      }).then(window.location.reload(false));
      setIsLoading(false);
    } catch (error) {
      Swal.fire({
        icon: "error",
        title: "Something went wrong",
        html: `Something went wrong`,
      });
      setIsLoading(false);
    }
  };

  const checkForOwn = async (address) => {
    const provider = new ethers.providers.JsonRpcProvider(
      `https://polygon-mumbai.g.alchemy.com/v2/${process.env.NEXT_PUBLIC_ALCHEMY_API_KEY}`
    );
    const contract = new ethers.Contract(
      contractAddress,
      contractABI,
      provider
    );
    try {
      const data = await contract.balanceOf(address);
      data == 1 ? setAlreadyOwner(true) : setAlreadyOwner(false);
    } catch (err) {
      console.log(err);
    }
  };

  useEffect(() => {
    checkForOwn(address);
  }, [address]);

  return (
    <div>
      <Head>
        <title>Mint NFT</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Navigation active={"mint"} />
      </header>
      <main className={styles.main}>
        <Container>
          <Row justify="center" align="center">
            <Col span={6}>
              <Grid.Container justify="center" align="center">
                <Grid md={12}>
                  <Input
                    readOnly
                    initialValue={
                      address
                        ? address
                        : "Connected wallet address will come here"
                    }
                    css={{ w: "50%", margin: "0 auto" }}
                    labelLeft="Address"
                    status="success"
                  />
                </Grid>

                <Grid>
                  <Spacer y={1} />
                  {isAlreadyOwner ? (
                    <p>Already Owned</p>
                  ) : (
                    <Button onClick={mint} disabled={isLoading}>
                      {isLoading ? "Loading.." : "Mint Your NFT"}
                    </Button>
                  )}
                </Grid>
              </Grid.Container>
              <Spacer y={1} />
              <Image
                height={400}
                width={400}
                css={{ borderRadius: "10px" }}
                src="./dark.png"
                alt="Default Image"
                objectFit="cover"
              />
            </Col>
          </Row>
        </Container>
      </main>

      <footer className={styles.footer}>
        <a
          target="_blank"
          rel="noreferrer"
          href="https://mohitchandel.github.io"
        >
          Made by Mohit
        </a>
      </footer>
    </div>
  );
}
